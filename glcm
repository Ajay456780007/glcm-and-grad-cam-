import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.feature import greycomatrix, greycoprops

def glcm_statistical_features(image_path):
    # Read image
    img = cv2.imread(image_path)
    
    # Convert to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # Compute GLCM
    glcm = greycomatrix(gray, 
                        distances=[1], 
                        angles=[0], 
                        levels=256, 
                        symmetric=True, 
                        normed=True)
    
    # Extract features
    contrast = greycoprops(glcm, 'contrast')[0, 0]
    correlation = greycoprops(glcm, 'correlation')[0, 0]
    energy = greycoprops(glcm, 'energy')[0, 0]
    homogeneity = greycoprops(glcm, 'homogeneity')[0, 0]
    
    # Print feature values
    features = {
        "Contrast": contrast,
        "Correlation": correlation,
        "Energy": energy,
        "Homogeneity": homogeneity
    }
    
    print("GLCM Statistical Features:")
    for k, v in features.items():
        print(f"{k}: {v:.4f}")
    
    # Create visualization
    output_img = img.copy()
    y0, dy = 30, 30
    for i, (k, v) in enumerate(features.items()):
        text = f"{k}: {v:.4f}"
        y = y0 + i * dy
        cv2.putText(output_img, text, (10, y), cv2.FONT_HERSHEY_SIMPLEX, 
                    0.8, (0, 255, 0), 2, cv2.LINE_AA)
    
    # Show results
    plt.figure(figsize=(10,5))
    plt.subplot(1, 2, 1)
    plt.title("Grayscale Image")
    plt.imshow(gray, cmap='gray')
    plt.axis("off")
    
    plt.subplot(1, 2, 2)
    plt.title("Image with GLCM Features")
    plt.imshow(cv2.cvtColor(output_img, cv2.COLOR_BGR2RGB))
    plt.axis("off")
    
    plt.show()
    
    return features, output_img


# Example usage:
# features, output_image = glcm_statistical_features("your_image.jpg")
